- name: Ensure talosctl of correct version
  block: 
  - name: Ensure talos-manifests/ exists
    ansible.builtin.file:
      path: "{{ working_dir }}"
      state: directory
      mode: "0755"
    check_mode: yes
    always_run: yes

  - name: Check if talosctl exists
    ansible.builtin.stat:
      path: "{{ working_dir }}/talosctl"
    register: talosctl_stat

  - name: Get Talos CLI version if binary exists
    ansible.builtin.command: "{{ working_dir }}/talosctl version --client"
    register: talosctl_version_output
    when: talosctl_stat.stat.exists
    changed_when: false
    check_mode: yes
    ignore_errors: true

  - name: Set talos installed version
    when: talosctl_stat.stat.exists and talosctl_version_output.rc == 0 and talosctl_version_output.stdout_lines is defined and talosctl_version_output.stdout_lines | length > 0
    ansible.builtin.set_fact:
      installed_talosctl_version: "{{ talosctl_version_output.stdout_lines[1].split(' ')[-1] }}"

  - name: Download Talos CLI from GitHub if not already present
    ansible.builtin.get_url:
      url: "https://github.com/siderolabs/talos/releases/download/{{ talosctl_version }}/talosctl-linux-amd64"
      force: yes
      dest: "{{ working_dir }}/talosctl"
      mode: '0755'
    check_mode: yes
    when: not talosctl_stat.stat.exists or installed_talosctl_version != talosctl_version

- name: Template manifests
  ansible.builtin.template:
    src: "installer-customization.yaml"
    dest: "{{ working_dir }}/installer-customization.yaml"
    mode: "0644"
  
- name: Post installer-customization.yaml to Talos factory schematics
  ansible.builtin.command:
    cmd: "curl -X POST --data-binary @{{ working_dir }}/installer-customization.yaml https://factory.talos.dev/schematics"
  check_mode: yes
  register: talos_factory_output

- name: Save Talos factory output ID to a variable
  ansible.builtin.set_fact:
    talos_factory_id: "{{ talos_factory_output.stdout | from_json | json_query('id') }}"

- name: Template manifests
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ working_dir }}/{{ item }}"
    mode: "0644"
  loop: "{{ talos_manifests }}"

- name: Template hosts
  ansible.builtin.command: "{{ working_dir }}/talosctl machineconfig patch {{ working_dir }}/{{ item.value.kind }}.yaml --patch @{{ working_dir }}/{{ item.value.file }}.yaml --output {{ working_dir }}/{{ item.value.file }}-full.yaml"
  loop: "{{ talos_hosts | dict2items }}"

- name: Apply config to hosts
  ansible.builtin.command: "{{ working_dir }}/talosctl --talosconfig={{ working_dir }}/talosconfig apply-config -n {{ item.value.ip }} -e {{ item.value.ip }} --file {{ working_dir }}/{{ item.value.file }}-full.yaml"
  loop: "{{ talos_hosts | dict2items }}"

# talosctl -e 192.168.0.2 -n 192.168.0.200 containers
# talosctl --talosconfig=./talosconfig --nodes 192.168.0.2 -e 192.168.0.2 version

# one time - first time for cluster
#talosctl bootstrap --nodes 192.168.0.2 --endpoints 192.168.0.2 --talosconfig=./talosconfig 

#talosctl --nodes 192.168.0.2 --endpoints 192.168.0.2 health --talosconfig=./talosconfig
#talosctl --nodes 192.168.0.2 --endpoints 192.168.0.2 dashboard --talosconfig=./talosconfig


