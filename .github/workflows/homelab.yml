name: Homelab CI/CD

on:
  push:
    branches: [ "master" ]

  pull_request:
    branches: [ "master" ]

  workflow_dispatch:

jobs:
  ansible-dry-run:
    name: Dry-Run Ansible Playbook
    runs-on: github-runner-instance
    container: ubuntu:noble
    steps:
      - uses: actions/checkout@v4
      - name: Setup packages
        env:
         DEBIAN_FRONTEND: noninteractive
        run: |
          apt update 
          apt install -y -q ca-certificates curl ssh ansible ansible-mitogen

      - name: Setup Ansible settings
        run: |
          echo "${{ secrets.VAULT_PASSWORD }}" > ansible/vault-password
          mkdir ~/.ssh || true
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          echo "ANSIBLE_CONFIG=ansible.cfg" >> $GITHUB_ENV
          echo "ANSIBLE_INVENTORY=inventory.yaml" >> $GITHUB_ENV
          echo "ANSIBLE_VAULT_PASSWORD_FILE=vault-password" >> $GITHUB_ENV
          
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_AGGREGATORCA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_CA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_ETCD_CA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_SECRET }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_SECRETBOX }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_SERVICEACCOUNT }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_TOKEN }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CONFIG_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_MACHINE_CA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_TALOS_TOKEN }}"


      - name: Check syntax Ansible
        run: |
          cd ansible
          ansible-playbook playbook.yaml --syntax-check
          
      - name: Dry-run Ansible playbook
        run: |
          cd ansible
          ansible-playbook playbook.yaml --check --diff

  ansible-apply:
    name: Apply Ansible Playbook
    needs:
      - ansible-dry-run
    runs-on: github-runner-instance
    container: ubuntu:noble
    if: github.ref == 'refs/heads/master'
    environment:
      name: Homelab
    steps:
      - uses: actions/checkout@v4
      - name: Setup packages
        env:
         DEBIAN_FRONTEND: noninteractive
        run: |
          apt update 
          apt install -y -q ca-certificates curl ssh ansible ansible-mitogen

      - name: Setup Ansible settings
        run: |
          echo "${{ secrets.VAULT_PASSWORD }}" > ansible/vault-password
          mkdir ~/.ssh || true
          echo "${{ secrets.ANSIBLE_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          echo "ANSIBLE_CONFIG=ansible.cfg" >> $GITHUB_ENV
          echo "ANSIBLE_INVENTORY=inventory.yaml" >> $GITHUB_ENV
          echo "ANSIBLE_VAULT_PASSWORD_FILE=vault-password" >> $GITHUB_ENV

          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_AGGREGATORCA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_CA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_ETCD_CA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_SECRET }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_SECRETBOX }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_SERVICEACCOUNT }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CLUSTER_TOKEN }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_CONFIG_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_MACHINE_CA_KEY }}"
          echo "::add-mask::${{ secrets.ANSIBLE_VAULT_TALOS_TOKEN }}"

      - name: Apply Ansible playbook
        if: github.ref == 'refs/heads/master'
        run: |
          cd ansible
          ansible-playbook playbook.yaml --diff

  tofu-plan:
    name: Plan OpenTofu
    runs-on: github-runner-instance
    container: ghcr.io/opentofu/opentofu:latest
    steps:
      - uses: actions/checkout@v4
      - name: OpenTofu plan
        env:
          TF_VAR_tunnel_secret: ${{ secrets.TUNNEL_SECRET }}
          TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
          TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          KUBERNETES_SERVICE_HOST: kubernetes.default.svc
          KUBERNETES_SERVICE_PORT: 443
        run: |
          cd terraform
          tofu init
          tofu plan

  tofu-apply:
    needs:
      - tofu-plan
    name: Apply OpenTofu
    runs-on: github-runner-instance
    container: ghcr.io/opentofu/opentofu:latest
    if: github.ref == 'refs/heads/master'
    environment:
      name: Homelab
    steps:
      - uses: actions/checkout@v4
      - name: OpenTofu plan
        env:
          TF_VAR_tunnel_secret: ${{ secrets.TUNNEL_SECRET }}
          TF_VAR_cloudflare_email: ${{ secrets.CLOUDFLARE_EMAIL }}
          TF_VAR_cloudflare_api_key: ${{ secrets.CLOUDFLARE_API_KEY }}
          TF_VAR_cloudflare_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          KUBERNETES_SERVICE_HOST: kubernetes.default.svc
          KUBERNETES_SERVICE_PORT: 443
        run: |
          cd terraform
          tofu init
          tofu apply
          
